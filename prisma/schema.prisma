generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  AUTHOR
}

enum NotificationType {
  NEW_QUOTE
  COMMENT
  LIKE
  FOLLOW
  SYSTEM
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  emailNotifications    Boolean                @default(false) @map("email_notifications")
  emailNotificationTypes NotificationType[]    @default([]) @map("email_notification_types")
  role                  UserRole               @default(USER)
  accounts              Account[]
  TwoFactorConfirmation TwoFactorConfirmation?
  quotes                Quote[]                @relation("QuoteAuthor")
  userProfile           UserProfile? 
  comments              Comment[]
  replies               Reply[]
  quoteLikes            QuoteLike[]
  commentLikes          CommentLike[]
  replyLikes            ReplyLike[]
  quoteBookmarks        QuoteBookmark[]
  followedAuthors       AuthorFollow[]
  notifications         Notification[]
  actorNotifications    Notification[]         @relation("NotificationActor")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confimation")
}

model Quote {
  id               String         @id @default(cuid())
  content          String         @db.Text
  slug             String         @unique
  backgroundImage  String? 
  featured         Boolean        @default(false) 
  downloadCount    Int            @default(0)  
  author           User           @relation("QuoteAuthor", fields: [authorId], references: [id])
  authorId         String
  category         Category       @relation(fields: [categoryId], references: [id])
  categoryId       String
  authorProfile    AuthorProfile  @relation(fields: [authorProfileId], references: [id])
  authorProfileId  String
  tags             Tag[]          @relation("QuoteToTag")
  gallery          QuoteToGallery[]
  comments         Comment[]
  userLikes        QuoteLike[]
  likes            Int            @default(0)
  userBookmarks    QuoteBookmark[]
  bookmarks        Int            @default(0) 
  dailyQuoteHistory DailyQuote[]
  TrendingQuote    TrendingQuote[]
  notifications    Notification[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt


  @@map("quotes")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  quotes      Quote[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model AuthorProfile {
  id            String        @id @default(cuid())
  name          String
  born          String?       // Keep existing field for now
  died          String?       // Keep existing field for now
  // New structured date fields
  bornDay       Int?
  bornMonth     Int?
  bornYear      Int?
  diedDay       Int?
  diedMonth     Int?
  diedYear      Int?
  birthPlace    String?       // Add birthplace field
  influences    String?
  bio           String        @db.Text
  slug          String        @unique
  followers     Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  images        AuthorImage[]
  quotes        Quote[]
  userFollowers AuthorFollow[]
  notifications Notification[]

  @@map("author_profiles")
}

model AuthorImage {
  id             String       @id @default(cuid())
  url            String
  authorProfile  AuthorProfile @relation(fields: [authorProfileId], references: [id], onDelete: Cascade)
  authorProfileId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("author_images")
}


model UserProfile {
  id          String    @id @default(cuid())
  username    String?   @unique
  bio         String?   @db.Text
  slug        String    @unique @default("")
  website     String?
  location    String?
  twitter     String?
  github      String?
  linkedin    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique

  @@index([slug])
  @@map("user_profiles")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  quotes    Quote[]  @relation("QuoteToTag")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model Gallery {
  id          String    @id @default(cuid())
  url         String
  publicId    String    @unique
  title       String?
  description String?   @db.Text
  altText     String?
  format      String?
  width       Int?
  height      Int?
  bytes       Int?
  isGlobal    Boolean   @default(true)
  usageCount  Int       @default(0)
  quotes      QuoteToGallery[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("galleries")
}

model QuoteToGallery {
  id          String   @id @default(cuid())
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId     String
  gallery     Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  galleryId   String
  isActive    Boolean  @default(false)
  isBackground Boolean @default(false)
  createdAt   DateTime @default(now())

  @@unique([quoteId, galleryId])
  @@map("quote_to_galleries")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  replies   Reply[]
  userLikes CommentLike[] 
  likes     Int      @default(0) 

  @@index([quoteId])
  @@map("comments")
}

model Reply {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userLikes ReplyLike[] 
  likes     Int      @default(0) 

  @@index([commentId])
  @@map("replies")
}

model QuoteLike {
  id        String   @id @default(cuid())
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([quoteId, userId])
  @@map("quote_likes")
}

model CommentLike {
  id        String   @id @default(cuid())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([commentId, userId])
  @@map("comment_likes")
}

model ReplyLike {
  id        String   @id @default(cuid())
  reply     Reply    @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([replyId, userId])
  @@map("reply_likes")
}

model QuoteBookmark {
  id        String   @id @default(cuid())
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([quoteId, userId])
  @@map("quote_bookmarks")
}

model AuthorFollow {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  authorProfile  AuthorProfile @relation(fields: [authorProfileId], references: [id], onDelete: Cascade)
  authorProfileId String
  createdAt      DateTime     @default(now())

  @@unique([userId, authorProfileId])
  @@map("author_follows")
}

model DailyQuote {
  id             String   @id @default(cuid())
  quote          Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId        String
  selectionDate  DateTime @default(now())
  expirationDate DateTime
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([quoteId])
  @@index([isActive])
  @@index([expirationDate])
  @@map("daily_quotes")
}

model Notification {
  id             String           @id @default(cuid())
  type           NotificationType
  title          String?
  message        String
  read           Boolean          @default(false)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  quote          Quote?           @relation(fields: [quoteId], references: [id], onDelete: SetNull)
  quoteId        String?
  
  authorProfile  AuthorProfile?   @relation(fields: [authorProfileId], references: [id], onDelete: SetNull)
  authorProfileId String?
  actor          User?            @relation("NotificationActor", fields: [actorId], references: [id], onDelete: SetNull)
  actorId        String?
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([userId])
  @@index([read])
  @@map("notifications")
}

model EmailLog {
  id         String   @id @default(cuid())
  type       String
  email      String
  data       Json
  createdAt  DateTime @default(now())

  @@index([email])
  @@index([type])
  @@map("email_logs")
}

model TrendingQuote {
  id            String   @id @default(cuid())
  quote         Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId       String
  rank          Int 
  likeCount     Int  
  batchId       String 
  batchDate     DateTime @default(now()) 
  isActive      Boolean  @default(true) 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([quoteId])
  @@index([isActive])
  @@index([batchId])
  @@map("trending_quotes")
}

model SearchEvent {
  id          String       @id @default(uuid())
  query       String
  type        String       @default("all") 
  userId      String?
  filters     Json?
  resultCount Int
  createdAt   DateTime     @default(now()) @map("created_at")
  clicks      SearchClick[]

  @@index([query])
  @@index([createdAt])
  @@index([userId])
}

model SearchClick {
  id            String     @id @default(uuid())
  searchEvent   SearchEvent @relation(fields: [searchEventId], references: [id], onDelete: Cascade)
  searchEventId String     @map("search_event_id")
  resultId      String     @map("result_id")
  resultType    String     @map("result_type")
  position      Int
  userId        String?    @map("user_id")
  createdAt     DateTime   @default(now()) @map("created_at")

  @@index([searchEventId])
  @@index([resultId, resultType])
  @@index([userId])
}

model PopularSearch {
  query        String    @id
  count        Int
  lastSearched DateTime  @map("last_searched")

  @@index([count])
  @@index([lastSearched])
}

model QuoteRelevance {
  quoteId    String  @id @map("quote_id")
  score      Float   @default(0)
  clickCount Int     @default(0) @map("click_count")
}

model AuthorRelevance {
  authorId   String  @id @map("author_id")
  score      Float   @default(0)
  clickCount Int     @default(0) @map("click_count")
}
